(fun (addToBst tree val)
    (if (= tree nil)
        (tuple val nil nil)
        (if (< (lookup tree 0) val)
            (if (= (lookup tree 1) nil)
                (tuple (lookup tree 0) val (lookup tree 2))
                (tuple (lookup tree 0) (addToBst (lookup tree 1) val) (lookup tree 2))
            )
            (if (= (lookup tree 2) nil)
                (tuple (lookup tree 0) (lookup tree 1) val)
                (tuple (lookup tree 0) (lookup tree 1) (addToBst (lookup tree 2) val))
            )
        )
    )
)

(fun (searchBst bst val)
    (if (= bst nil)
        false
        (if (= (lookup bst 0) val)
            true
            (if (< val (lookup bst 0))
                (if (= (lookup bst 1) nil)
                    false
                    (searchBst (lookup bst 1) val)
                )
                (if (= (lookup bst 2) nil)
                    false
                    (searchBst (lookup bst 2) val)
                )
            )
        )
    )
)

(let (a (tuple 1 nil nil))
    (let (b (tuple 3 nil nil))
        (let (c (tuple 2 a b))
            (let (d (tuple 5 nil nil))
                (let (e (tuple 4 c d))
                    (block
                        (print e)
                        (print (searchBst e 5))
                        (print (searchBst e 6))
                        (set! e (addToBst e 6))
                        (print e)
                        (searchBst e 6)
                    )
                )
            )
        )
    )
)